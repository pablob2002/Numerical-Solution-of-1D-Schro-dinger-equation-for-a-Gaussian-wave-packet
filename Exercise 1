import math
from matplotlib import pyplot as plt



# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    delta_t = 0.005
    t_fin = 50
    delta_x = 0.05
    x_min = -60
    x_max = 60
    k_0 = 1
    sigma_0 = 3
    x_0 = -10
    L = 2
    V_0 = 2
    M = 2401
    x_val=[]
    V=[]
    l = x_min
    while l < x_max:
        if l>=0 and l<=L:
            V.append(V_0)
        else:
            V.append(0)
        l = l + delta_x
    for i in range(M):
        x_val.append(x_min+i*delta_x)
    t_val=[]
    t=0
    while t<t_fin:
        t_val.append(t)
        t+=delta_t
    #Psi_0 vector
    psi_current=[]
    l=x_min
    while l <x_max:
        psi_current.append((1/(math.pi*sigma_0**2))**(1/4)*math.e**(1j*k_0*l)*math.e**(-(l-x_0)**2/(2*sigma_0**2)))
        l=l+delta_x
    #L and R matrix
    L_mat = []
    R_mat = []
    alpha = (delta_t) / (4 * delta_x ** 2)
    beta = 1 + 2j * alpha
    LMat_diag=[]
    for i in range(M):
        if (x_min + delta_x * i) < 0 or (x_min + delta_x * i) > L:
            LMat_diag.append(beta)
        else:
            LMat_diag.append(beta + 1j * delta_t * V_0 / 2)
    LMat_subdiag=-1j*alpha
    beta_adj = 1 - 2j * alpha
    RMat_diag = []
    for i in range(M):
        if (x_min + delta_x * i) < 0 or (x_min + delta_x * i) > L:
            RMat_diag.append(beta_adj)
        else:
            RMat_diag.append(beta_adj + 1j * delta_t * V_0 / 2)
    RMat_subdiag = 1j * alpha
    #S and A
    S_trid=[]
    for i in range(M):
        if i==0:
            s=RMat_diag[i]*psi_current[i] + psi_current[i+1]*RMat_subdiag
        elif i==M-1:
            s = RMat_diag[i] * psi_current[i] + psi_current[i-1] * RMat_subdiag
        else:
            s = RMat_diag[i] * psi_current[i] + psi_current[i+1] * RMat_subdiag+ psi_current[i-1] * RMat_subdiag
        S_trid.append(s)
    A_trid=[]
    for i in range(M):
        if i==0:
            a=RMat_subdiag/RMat_diag[i]
        else:
            a=RMat_subdiag/(RMat_diag[i]-RMat_subdiag*A_trid[i-1])
        A_trid.append(a)
    #Now we rewrite S_trid
    S_trid2=[]
    for i in range(M):
        if i==0:
            s=S_trid[i]/RMat_diag[i]
        else:
            s=(S_trid[i]-RMat_subdiag*S_trid2[i-1])/(RMat_diag[i]-RMat_subdiag*A_trid[i-1])
        S_trid2.append(s)
    S_trid=S_trid2
    #Now we create psi_next
    Psi_next=[]
    for i in range(M,0,-1):
        if i==M:
            x=S_trid[i-1]
        else:
            x=S_trid[i-1]-A_trid[i-1]*x
        Psi_next.insert(0,x)
    #Psi squared vector
    psi_2_data=[]
    Psi_2 = []
    for i in range(M):
        Psi_2.append(abs(psi_current[i])**2)
    psi_2_data.append(Psi_2)
    t = delta_t
    it=1
    while t < t_fin:
        psi_current=Psi_next
        # S and A
        S_trid = []
        for i in range(M):
            if i == 0:
                s = RMat_diag[i] * psi_current[i] + psi_current[i + 1] * RMat_subdiag
            elif i == M - 1:
                s = RMat_diag[i] * psi_current[i] + psi_current[i - 1] * RMat_subdiag
            else:
                s = RMat_diag[i] * psi_current[i] + psi_current[i + 1] * RMat_subdiag + psi_current[
                    i - 1] * RMat_subdiag
            S_trid.append(s)
        # Now we rewrite S_trid
        S_trid2 = []
        for i in range(M):
            if i == 0:
                s = S_trid[i] / RMat_diag[i]
            else:
                s = (S_trid[i] - RMat_subdiag * S_trid2[i - 1]) / (RMat_diag[i] - RMat_subdiag * A_trid[i - 1])
            S_trid2.append(s)
        S_trid = S_trid2
        # Now we create psi_next
        Psi_next = []
        for i in range(M, 0, -1):
            if i == M:
                x = S_trid[i - 1]
            else:
                x = S_trid[i - 1] - A_trid[i - 1] * x
            Psi_next.insert(0, x)
        Psi_2 = []
        for i in range(M):
            Psi_2.append(abs(psi_current[i]) ** 2)
        if it==500 or it==1000 or it==1500 or it==2000:
            psi_2_data.append(Psi_2)
        t+=delta_t
        it+=1
    #Exercise 1
    plt.plot(x_val, psi_2_data[0], color= 'peachpuff', label= 'Initial packet')
    plt.plot(x_val, psi_2_data[1], color='lightpink', label='$500\Delta t$')
    plt.plot(x_val, psi_2_data[2], color='turquoise', label='$1000\Delta t$')
    plt.plot(x_val, psi_2_data[3], color='teal', label='$1500\Delta t$')
    plt.plot(x_val, psi_2_data[4], color='darkgray', label='$2000\Delta t$')
    plt.legend()
    plt.ylabel('$|\Psi(x)|^2$')
    plt.xlabel('$x$')
    plt.axis([-25, 10, 0, 0.5])
    V_x = plt.twinx()
    V_x.plot(x_val, V, color='black')
    V_x.set_ylim(0, 3)
    V_x.set_ylabel('$V(x)$')

    plt.show()
