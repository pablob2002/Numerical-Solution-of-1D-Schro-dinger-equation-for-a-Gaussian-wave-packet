from matplotlib import pyplot as plt
import numpy as np



# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    delta_t = 0.005
    t_fin = 50
    delta_x = 0.05
    x_min = -60
    x_max = 60
    k_0 = 1
    sigma_0 = 3
    x_0 = -10
    L = 2
    V_0 = 2
    M = 2401
    x_val=[]
    V=[]
    l = x_min
    while l < x_max:
        if l>=0 and l<=L:
            V.append(V_0)
        else:
            V.append(0)
        l = l + delta_x
    for i in range(M):
        x_val.append(x_min+i*delta_x)
    #Psi_0 vector
    psi_current=[]
    l=x_min
    while l <x_max:
        psi_0=(1/(np.pi*sigma_0**2))**(1/4)*np.exp(1j*k_0*l)*np.exp((-(l-x_0)**2)/(2*sigma_0**2))
        psi_current.append(psi_0)
        l=l+delta_x
    #L and R matrix
    L_mat = []
    R_mat = []
    alpha = (delta_t) / (4 * delta_x ** 2)
    beta = 1 + 2j * alpha
    LMat_diag=[]
    for i in range(M):
        LMat_diag.append(beta + 1j * delta_t * V[i] / 2)
    LMat_subdiag=-1j*alpha
    beta_adj = 1 - 2j * alpha
    RMat_diag = []
    for i in range(M):
        RMat_diag.append(beta_adj -1j * delta_t * V[i] / 2)
    RMat_subdiag = 1j * alpha
    #A diagonal matrix
    A_trid = []
    for i in range(M):
        if i == 0:
            a = LMat_subdiag / LMat_diag[i]
        else:
            a = LMat_subdiag / (LMat_diag[i] - LMat_subdiag * A_trid[i - 1])
        A_trid.append(a)
    t = 0
    it=0
    Psi_2 = []
    psi_2_data = []
    while t < t_fin:
        # S vector
        S_trid = []
        for i in range(M):
            if i == 0:
                s = RMat_diag[i] * psi_current[i] + psi_current[i + 1] * RMat_subdiag
            elif i == M - 1:
                s = RMat_diag[i] * psi_current[i] + psi_current[i - 1] * RMat_subdiag
            else:
                s = RMat_diag[i] * psi_current[i] + psi_current[i + 1] * RMat_subdiag + psi_current[
                    i - 1] * RMat_subdiag
            S_trid.append(s)
        # Now we rewrite S_trid
        S_trid2 = []
        for i in range(M):
            if i == 0:
                s = S_trid[i] / LMat_diag[i]
            else:
                s = (S_trid[i] - LMat_subdiag * S_trid2[i - 1]) / (LMat_diag[i] - LMat_subdiag * A_trid[i - 1])
            S_trid2.append(s)
        S_trid = S_trid2
        # Now we create psi_next
        Psi_next = []
        for i in range(M, 0, -1):
            if i == M:
                x = S_trid[i - 1]
            else:
                x = S_trid[i - 1] - A_trid[i - 1] * Psi_next[0]
            Psi_next.insert(0, x)
        if it==0 or it==500 or it==1000 or it==1500 or it==2000:
            # Psi squared vector
            for i in psi_current:
                Psi_2.append(abs(i)**2)
            psi_2_data.append(Psi_2)
            Psi_2=[]
        psi_current = Psi_next
        t+=delta_t
        it+=1
    #Exercise 1
    plt.plot(x_val, psi_2_data[0], color='paleturquoise', label= 'Initial packet')
    plt.plot(x_val, psi_2_data[1], color='turquoise', label='$500\Delta t$')
    plt.plot(x_val, psi_2_data[2], color='lightseagreen', label='$1000\Delta t$')
    plt.plot(x_val, psi_2_data[3], color='teal', label='$1500\Delta t$')
    plt.plot(x_val, psi_2_data[4], color='darkgray', label='$2000\Delta t$')
    plt.legend()
    plt.ylabel('$|\Psi(x)|^2$')
    plt.xlabel('$x$')
    plt.axis([-25, 10, 0, 0.5])
    V_x = plt.twinx()
    V_x.plot(x_val, V, color='black')
    V_x.set_ylim(0, 3)
    V_x.set_ylabel('$V(x)$')

    plt.show()
